#!/usr/bin/python

import argparse
import subprocess
import sys

def session(args, cmd):
    print("Tunneling jupyter notebook from {} to localhost:{}...".format(args.host, args.local))

    try:
        remote_process = subprocess.check_output(cmd, shell=True)
        while True:
            if remote_process == '':
                break
            output = remote_process.stdout.readline()
            if output == '' and remote_process.poll() is not None:
                break
            if output:
                print output.strip()
    except KeyboardInterrupt:
        print("Disconnected from the jupyter notebook.")
        print("Please run 'ganymede stop' to ensure that the notebook is stopped remotely or 'ganymede connect' to reconnect.")
    except subprocess.CalledProcessError:
        print("Failed to start jupyter notebook at {}:{}.".format(args.host, args.port))
        print("The port may already be in use or the hostname may be invalid.")
        print("The host may also be running an older version of jupyter, try running ganymede with the --compatibility flag.")
    else:
        print("The connection was lost unexpectedly.")
        print("Please run 'ganymede connect' to reconnect.")
    return 0

def start(args):
    cmd = [
        "ssh",
        "{}".format(args.host),
        "-L {}:localhost:{}".format(args.local, args.port)
    ]
    if args.compatibility:
        cmd.append("'ipython notebook --no-browser --notebook-dir={} --port={} --port-retries=0'".format(args.dir, args.port))
    else:
        cmd.append("'jupyter notebook --no-browser --notebook-dir={} --port={} --port-retries=0'".format(args.dir, args.port))
    cmd = ' '.join(cmd)
    
    return session(args, cmd)

def connect(args):
    cmd = [
        "ssh",
        "{}".format(args.host),
        "-L {}:localhost:{}".format(args.local, args.port),
        "-N"
    ]
    cmd = ' '.join(cmd)
    
    print("Reconnecting to {}:{}...").format(args.host, args.port)
    return session(args, cmd)

def stop(args):
    return kill(args.host, args.port)

def kill(host, port=''):
    cmd = ' '.join([
        "ssh",
        "{}".format(host),
        "'kill $(ps aux | grep -E '\\''([j]upyter|[i]python).*port={}'\\'' | awk '\\''{{print $2}}'\\'')'".format(port)
    ])
    if port == '':
        print("Stopping all jupyter notebooks at {}...".format(host))
    else:
        print("Stopping jupyter notebook at {} on port {}...".format(host, port))

    try:
        subprocess.check_call(cmd, shell=True, stderr=subprocess.PIPE)
        if port == "":
            print("Stopped jupyter notebooks at {}.".format(host))
        else:
            print("Stopped jupyter notebook at {} on port {}...".format(host, port))
    except KeyboardInterrupt:
        print("The connection was lost unexpectedly.")
        print("Please run 'ganymede stop' to ensure that the notebook is stopped remotely.")
    except subprocess.CalledProcessError:
        print("There are no instances of jupyter notebook to kill.")
    return 0

def ls(args):
    cmd = ' '.join([
        "ssh",
        "{}".format(args.host),
        "'jupyter notebook list'"
    ])
    remote_process = subprocess.check_output(cmd, shell=True)
    print(remote_process)
    return 0

def main(argv=None):
    commands = {
        'start': start,
        'connect': connect,
        'stop': stop,
        'ls': ls
    }

    parser = argparse.ArgumentParser(description='Starts a jupyter notebook on a remote machine and tunnels it to the local machine.')
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    parser_start = subparsers.add_parser('start', help='Starts the jupyter notebook.')
    parser_start.add_argument('host', type=str, help='remote machine to ssh into')
    parser_start.add_argument('--dir', '-D', type=str, default='', help='directory on remote machine to start notebook from (default: ~/)')
    parser_start.add_argument('--local', '-L', type=int, default='8888', help='port on this machine to tunnel to (default: %(default)s)')
    parser_start.add_argument('--port', '-P', type=int, default='8888', help='port on the host machine to listen on (default: %(default)s)')
    parser_start.add_argument('--compatibility', '-C', action='store_true', help='launches the notebook using ipython instead of jupyter')
    
    parser_connect = subparsers.add_parser('connect', help='Connects to an existing jupyter notebook.')
    parser_connect.add_argument('host', type=str, help='remote machine to ssh into')
    parser_connect.add_argument('--local', '-L', type=int, default='8888', help='port on this machine to tunnel to (default: %(default)s)')
    parser_connect.add_argument('--port', '-P', type=int, default='8888', help='port on the host machine that the server is listening on (default: %(default)s)')

    parser_stop = subparsers.add_parser('stop', help='Stops all jupyter notebooks.')
    parser_stop.add_argument('host', type=str, help='remote machine to ssh into')
    parser_stop.add_argument('--port', '-P', type=str, default='', help='specify which instance to kill (default: kills all instances)')

    parser_ls = subparsers.add_parser('ls', help='Lists all the currently running jupyter notebooks.')
    parser_ls.add_argument('host', type=str, help='remote machine to ssh into')

    args = parser.parse_args(argv)

    return commands[args.command](args)

if __name__ == '__main__':
    main()
