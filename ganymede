#!/usr/bin/python

import argparse
import sys
import subprocess

def start(args):
    cmd = ' '.join([
        "ssh",
        "{}@{}".format(args.user, args.host),
        "-L {}:localhost:{}".format(args.local, args.remote),
        "'jupyter notebook --no-browser --notebook-dir={} --port={}'".format(args.dir, args.remote)
    ])
    try:
        remote_process = subprocess.check_output(cmd, shell=True)
        while True:
            output = remote_process.stdout.readline()
            if output == '' and remote_process.poll() is not None:
                break
            if output:
                print output.strip()
    except KeyboardInterrupt:
        print("")
        return kill(args.user, args.host)
    return 0

def stop(args):
    return kill(args.user, args.host)

def kill(user, hostname):
    cmd = ' '.join([
        "ssh",
        "{}@{}".format(user, hostname),
        "'kill $(ps aux | grep '[j]upyter' | awk '\\''{print $2}'\\'')'"
    ])
    try:
        subprocess.check_call(cmd, shell=True, stderr=subprocess.PIPE)
        print("Stopped all jupyter notebook at {}@{}.".format(user, hostname))
    except subprocess.CalledProcessError:
        print("There are no instances of jupyter notebook to kill.")
    return 0

def ls(args):
    cmd = ' '.join([
        "ssh",
        "{}@{}".format(args.user, args.host),
        "'jupyter notebook list'"
    ])
    remote_process = subprocess.check_output(cmd, shell=True)
    print(remote_process)
    return 0

def main(argv=None):
    commands = {
        'start': start,
        'stop': stop,
        'ls': ls
    }

    parser = argparse.ArgumentParser(description='Starts a jupyter notebook on supernova and tunnels it to the local machine.')
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    parser_start = subparsers.add_parser('start', help='Starts the jupyter notebook.')
    parser_start.add_argument('user', type=str, help='username to ssh with')
    parser_start.add_argument('--dir', '-D', type=str, default='', help='directory to start notebook from')
    parser_start.add_argument('--host', '-H', type=str, default='supernova.ocf.berkeley.edu', help='hostname of the machine (default: %(default)s)')
    parser_start.add_argument('--local', '-L', type=int, default='8888', help='port on this machine to tunnel to (default: %(default)s)')
    parser_start.add_argument('--remote', '-R', type=int, default='8888', help='port on the host machine to listen on (default: %(default)s)')

    parser_stop = subparsers.add_parser('stop', help='Stops all jupyter notebooks.')
    parser_stop.add_argument('user', type=str, help='username to ssh with')
    parser_stop.add_argument('--host', '-H', type=str, default='supernova.ocf.berkeley.edu', help='hostname of the machine (default:%(default)s)')

    parser_ls = subparsers.add_parser('ls', help='Lists all the currently running jupyter notebooks.')
    parser_ls.add_argument('user', type=str, help='username to ssh with')
    parser_ls.add_argument('--host', '-H', type=str, default='supernova.ocf.berkeley.edu', help='hostname of the machine (default:%(default)s)')

    args = parser.parse_args(argv)

    return commands[args.command](args)

if __name__ == '__main__':
    main()
